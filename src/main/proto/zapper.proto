// Zapper

package org.sonatype.spice.zapper.internal.hawtbuf;

option java_multiple_files = true;

// reused messages
message Hash {
  required string hashAlg = 1; // segment hash algorithm identifier
  required bytes hashBytes = 2; // segment hash content (as bytes)
}

// vvv Recipe vvv

message File {
  required string fileId = 1; // file ID
  required string path = 2; // file path
  required int64 fileLastModified = 3; // file last modified
  repeated Hash hashes = 4; // list of known file hashes
  repeated string filters = 5; // optionally, filters applied to file body as whole (in order)
}

// transfer message
message TransferMessage {
  required string magic = 1 [default = "zRec"]; // transfer "magic"
  required string transferId = 2; // transfer ID
  required int64 transferTotalSize = 3; // transfer total "original" size (in bytes)

  repeated File files = 10; // the list of files
}

message Segment {
  required string segmentId = 1; // segment ID
  required int64 offset = 2; // segment offset from file beginning
  required int64 length = 3; // segment length
}

message FileSegments {
  required string fileId = 1; // file ID
  repeated Segment segments = 2; // segments in order needed to reassemble the original
}

// segment message
message SegmentsMessage {
  required string magic = 1 [default = "zSeg"]; // segments "magic"
  required string transferId = 2; // transfer ID

  repeated FileSegments fileSegments = 10; // the list of file segments
}

// ^^^ Recipe ^^^

// prepended to each segment, followed by (count) bytes of body, and again (or track ends)
message SegmentHeader {
  required string magic = 1 [default = "zSeh"]; // segment "magic"
  required string fileId = 2; // file ID
  required string segmentId = 3; // segment ID
  required int64 segmentOffset = 4; // segment offset (in bytes) in final file
  required int64 segmentLength = 5; // segment length (in bytes) in final file
  repeated string filters = 6; // optionally, filters applied to segment body (in order)
}

// appended to each segment
message SegmentFooter {
  required string magic = 1 [default = "zSef"]; // segment "magic"
  repeated Hash hashes = 2; // list of known segment hashes
}
